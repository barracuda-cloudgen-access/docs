---
AWSTemplateFormatVersion: '2010-09-09'

Description: >-
  Fyde Access Proxy Cloudformation template

Parameters:

  FydeAccessProxyToken:
    Description: Fyde Access Proxy Token for this proxy (obtained from the console after proxy creation)
    Type: String
    MinLength: '20'
    NoEcho: true
    AllowedPattern: '^https:\/\/.*\.fyde\.com\/proxies.*proxy_auth_token.*$'

  FydeAccessProxyPublicPort:
    Description: Public port for this proxy (must match the value configured in the console for this proxy)
    Default: 443
    Type: Number
    MinValue: 1
    MaxValue: 65535

  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: Select the Virtual Private Cloud (VPC) to use
    ConstraintDescription: >-
      must be the VPC Id of an existing Virtual Private Cloud. Outbound traffic
      for the default security group associated with this VPC should be enabled.

  PublicSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: 'Select the SubnetIds to use. NOTE: Use Public Subnets only'
    ConstraintDescription: >-
      recomended to be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud and should allow access to internet

  ASGMaxSize:
    Description: Enter the Max Size for the ASG
    Default: 3
    Type: Number
    MinValue: 1

  ASGMinSize:
    Description: Enter the Min Size for the ASG
    Default: 2
    Type: Number
    MinValue: 1

  ASGDesiredCapacity:
    Description: Enter the desired capacity for the ASG
    Default: 2
    Type: Number
    MinValue: 1

  KeyName:
    Description: EC2 instance key name
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: must be a valid EC2 instance type.

Resources:

  DescribeImagesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeImages
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: ec2:DescribeImages
                Effect: Allow
                Resource: '*'

  GetLatestAMI:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.6
      Handler: index.handler
      Role: !Sub ${DescribeImagesRole.Arn}
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import traceback

          def handler(event, context):
            try:
              response = boto3.client('ec2').describe_images(
                  Owners=[event['ResourceProperties']['Owner']],
                  Filters=[
                    {'Name': 'name', 'Values': [event['ResourceProperties']['Name']]},
                    {'Name': 'architecture', 'Values': [event['ResourceProperties']['Architecture']]},
                    {'Name': 'root-device-type', 'Values': ['ebs']},
                  ],
              )

              amis = sorted(response['Images'],
                            key=lambda x: x['CreationDate'],
                            reverse=True)
              id = amis[0]['ImageId']

              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, id)
            except:
              traceback.print_last()
              cfnresponse.send(event, context, cfnresponse.FAIL, {}, "ok")

  FydeAccessProxyAmiLatest:
    Type: Custom::FindAMI
    Properties:
      ServiceToken: !Sub ${GetLatestAMI.Arn}
      Owner: '766535289950'
      Name: 'amazonlinux-2-base_*'
      Architecture: x86_64

  FydeEnrollmentToken:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: fyde_enrollment_token
      Description: Fyde Access Proxy Token
      SecretString: !Ref FydeAccessProxyToken
      Tags:
        - Key: Name
          Value: FydeAccessProxy

  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref PublicSubnets
      Scheme: internet-facing
      Type: network
      Tags:
        - Key: Name
          Value: FydeAccessProxy
        - Key: Application
          Value: FydeAccessProxyASG

  NLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NLBTargetGroup
      LoadBalancerArn: !Ref NLB
      Port: !Ref FydeAccessProxyPublicPort
      Protocol: TCP

  NLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 3
      Port: !Ref FydeAccessProxyPublicPort
      Protocol: TCP
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: FydeAccessProxy
        - Key: Application
          Value: FydeAccessProxyASG

  InboundSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow inbound access to Fyde Access Proxy on the configured port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref FydeAccessProxyPublicPort
          ToPort: !Ref FydeAccessProxyPublicPort
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: FydeAccessProxy
        - Key: Application
          Value: FydeAccessProxyASG

  ResourceSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow FydeAccessProxy access to internal resources
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: FydeAccessProxy
        - Key: Application
          Value: FydeAccessProxyASG

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref PublicSubnets
      Cooldown: 120
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: !Ref ASGMaxSize
      MinSize: !Ref ASGMinSize
      DesiredCapacity: !Ref ASGDesiredCapacity
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref NLBTargetGroup
      TerminationPolicies:
        - OldestInstance
      Tags:
        - Key: Name
          Value: FydeAccessProxy
          PropagateAtLaunch: 'true'
        - Key: Application
          Value: FydeAccessProxyASG
          PropagateAtLaunch: 'true'

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      KeyName: !Ref KeyName
      AssociatePublicIpAddress: true
      ImageId: !Ref FydeAccessProxyAmiLatest
      SecurityGroups:
        - !Ref InboundSG
        - !Ref ResourceSG
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          INSTALL_PATH="/tmp/fyde-access-proxy"
          INSTALL_URL="https://url.fyde.me/install-fyde-proxy-linux"
          mkdir -p "$INSTALL_PATH"
          curl -fsSLo "$INSTALL_PATH/install-fyde-proxy-linux.sh" "$INSTALL_URL"
          chmod +x "$INSTALL_PATH/install-fyde-proxy-linux.sh"
          sudo "$INSTALL_PATH/install-fyde-proxy-linux.sh" -p ${FydeAccessProxyPublicPort} -u
          rm -rf "$INSTALL_PATH"

  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: GetFydeSecrets
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:fyde_*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:ListSecrets'
                Resource: '*'

Outputs:
  NetworkLoadBalancerDnsName:
    Description: Update the Fyde Access Proxy in the Console with this DNS name
    Value:
      !GetAtt NLB.DNSName
  SecurityGroupforResources:
    Description: Use this group to allow Fyde Access Proxy access to internal resources
    Value:
      !Ref ResourceSG
